import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }

    dependencies {
        classpath(Libs.androidToolsBuildGradle)
        classpath(Libs.kotlinGradlePlugin)
        classpath(Libs.gradleBintrayPlugin)
        classpath(Libs.dokkaGradlePlugin)
        classpath(Libs.kotlinSerialization)
        classpath(Libs.buildInfoExtractorGradle)
    }
}

plugins{
    id("com.jfrog.artifactory")
    id("maven-publish")
    id("com.vanniktech.android.junit.jacoco") version "0.16.0"
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://dl.bintray.com/salesforce-mobile/android"
        }
    }
    group GROUP
    version VERSION

    junitJacoco {
        jacocoVersion = Versions.jacoco // type String
        ignoreProjects = [] // type String array
        excludes // type String List
        includeNoLocationClasses = false // type boolean
        includeInstrumentationCoverageInMergedReport = false // type boolean
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
//    contextUrl = 'http://127.0.0.1:8081/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_API_KEY')
//            username = 'admin'
//            password = 'test1234'
        }
        defaults {
            publications('mavenPublication')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
}
// TODO: Move lint to plugin
// TODO: Move Dokka config to plugin
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
